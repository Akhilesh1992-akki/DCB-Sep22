#Jenkins Master Slave Configuration: 

#Launch New AWS Linux Instances

#Jenkins Master, ##Node1
#Launch AWS Linux Instance with port 8080 & Name Tag
#Update the Instance

#Execute only in Master:

#Jenkins Installation Steps:
#Launch AWS Linux Instance with port 8080 & Name Tag
#Update the Instance

sudo -i

yum update -y

#Install Jenkins : ### For ref.: https://www.jenkins.io/download/

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key

#Install epel Package:
amazon-linux-extras install epel

#Install Java: 
amazon-linux-extras install java-openjdk11

yum install jenkins 

#Start Jenkins:

# Start jenkins service
#service jenkins start
#systemctl 


#Setup Jenkins to start at boot,
#chkconfig jenkins on

systemctl status jenkins

systemctl enable jenkins

systemctl start jenkins

#systemctl enable tomcat
#systemctl start tomcat

### Open new Browser using <public-ip-addr>:8080
#eg.:http://13.234.112.31:8080/

### And follow the instructions to configure and install suggested plugins and start with Jenkins User Interface.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###Execute in Slave Nodes:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sudo -i

#Install epel Package:

amazon-linux-extras install epel
#Install Java: 
amazon-linux-extras install java-openjdk11

#Install GIT:

yum install git
  
#Install Maven:

cd /tmp

#https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz

sudo wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz

sudo tar xf /tmp/apache-maven-3.8.6-bin.tar.gz -C /opt

#Create a symlink for Apache maven directory to update the maven versions
sudo ln -s /opt/apache-maven-3.8.6 /opt/maven

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set Java Path / Environment Variables:
open .bashrc & add the following lines:


#java-11-openjdk-11.0.16.0.8-1.amzn2.0.1.x86_64

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.16.0.8-1.amzn2.0.1.x86_64"
export MAVEN_HOME=/opt/apache-maven-3.8.6
export M2=/opt/apache-maven-3.8.6/bin
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$MAVEN_HOME:$M2

source ~/.bash_profile

open .bash_profile & add the following lines:

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-11.0.16.0.8-1.amzn2.0.1.x86_64"
export MAVEN_HOME=/opt/apache-maven-3.8.6
export M2=/opt/apache-maven-3.8.6/bin
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$MAVEN_HOME:$M2

source ~/.bash_profile

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add User : useradd -m -d /home/jenkins jenkin

su jenkin

ssh-keygen

ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public

cat id_rsa & copy the private key and paste it into jenkins node config. enter private key directly field
Then,
cat id_rsa.pub > authorized_keys

chown -R jenkin /home/jenkins/.ssh
chmod 600 /home/jenkins/.ssh/authorized_keys
chmod 700 /home/jenkins/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Jenkins-Master <---> Jenkins Slave 

#How the connection is established? SSH Keys
#Create a New User - Create SSH Key for the user. 


#Login to Jenkins thru browser, Go to Manage Jenkins --> Config Nodes -- > Add New Node 

#Config the Node Name, Label, Access thru SSH Parm - user Name, with private key

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``

Goto Global Tools config. Settings and ADD Maven Installation Details.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
pipeline {
    
    agent {
        label 'Slave1'
    }
    stages {
        stage('SCM-Checkout') {
            steps {
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
	}
}




Pipeline Script:

pipeline {
    
    agent {
        label 'Slave1'
    }

    tools 
    {
        maven 'Maven-3.8.6'
    }
    
    stages {
        stage('SCM-Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'

            }
			}
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                //bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }
			}
    }
}
